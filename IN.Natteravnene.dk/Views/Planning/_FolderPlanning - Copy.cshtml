@model FolderPlanningModel
<table class="table table-striped table-bordered table-hover folderplanning">
    <thead>
        <tr>
            <th>
                @*AR<br />
                <label>
                    <input id="@Html.IdFor(m => m.AutoRemove)" name="@Html.IdFor(m => m.AutoRemove)" class="ace ace-switch ace-switch-6" type="checkbox" checked="@Model.AutoRemove" value="true" />
                    <!--<input name="switch-field-1" class="ace ace-switch" type="checkbox">-->
                    <span class="lbl"></span>
                </label>*@
                @DomainStrings.FullName
            </th>
            <th>Tilbage<br />melding</th>
            <th>Max/nu<br />ture</th>
            @foreach (Team t in Model.Folder.Teams)
            {
                <th class="teamdate @Html.Raw(t.Teammembers.Count() >= Model.minTeammembers ? "tok" : "" )">@t.Start.ToString("ddd")<br />@t.Start.ToString("dd")<br />@t.Start.ToString("MM")<br /><small>@t.Start.ToString("HH:mm")</small></th>
            }
        </tr>
        <tr>
            <th colspan="1"></th>
            <th colspan="2">Køns fordeling ok >></th>
            @foreach (Team t in Model.Folder.Teams)
            {
                <th class="@Html.Raw(t.Teammembers.Count() >= Model.minTeammembers ? "tok" : "" ) center"><i class="ace-icon fa fa-male icon-only @Html.Raw(t.Teammembers.Where(M => M.Gender == Gender.Man).Any() ? "green" : "light-grey")"></i><i class="ace-icon fa fa-female icon-only @Html.Raw(t.Teammembers.Where(M => M.Gender == Gender.Woman).Any() ? "green" : "light-grey")"></i></th>
            }
        </tr>


    </thead>
    <tfoot>
        <tr>
            <th>
                @*AR<br />
                <label>
                    <input id="@Html.IdFor(m => m.AutoRemove)" name="@Html.IdFor(m => m.AutoRemove)" class="ace ace-switch ace-switch-6" type="checkbox" checked="@Model.AutoRemove" value="true" />
                    <!--<input name="switch-field-1" class="ace ace-switch" type="checkbox">-->
                    <span class="lbl"></span>
                </label>*@
                @DomainStrings.FullName
            </th>
            <th>Tilbage<br />melding</th>
            <th>Max/nu<br />ture</th>
            @foreach (Team t in Model.Folder.Teams)
            {
                <th class="teamdate @Html.Raw(t.Teammembers.Count() >= Model.minTeammembers ? "tok" : "" )">@t.Start.ToString("ddd")<br />@t.Start.ToString("dd")<br />@t.Start.ToString("MM")<br /><small>@t.Start.ToString("HH:mm")</small></th>
            }
        </tr>
    </tfoot>
    <tbody>
        @foreach (NRMembership P in Model.Active)
        {
            var PFeedback = Model.FeedBack.Where(F => F.PersonID == P.Person.PersonID).FirstOrDefault();

          
                <tr  >
                    <td>
                        <div class="hidden-sm hidden-xs action-buttons">
                            <a class="blue" href="@Url.Action("Feedback", null, new { F = Model.Folder.FolderID, P = P.Person.PersonID})" data-rel="tooltip" title="@General.View" data-original-title="@General.View">
                               @P.Person.FullName
                            </a>
                            &nbsp;@if (P.Teamleader == true)
                            {<text><i class="@Icons.TeamLeader"></i></text>}
                        </div>
                    </td>
                    <td class="feedbackstatus">@(PFeedback == null ? "-" : PFeedback.Pass == true ? "PASS" : PFeedback.Pass == false ? "OK" : "-")</td>
                    <td class="bookingstatus">@(string.Format("{0} / {1}", (PFeedback == null || PFeedback.Pass == true) ? "-" : PFeedback.MaxTeams == null ? "-" : PFeedback.MaxTeams.ToString(), Model.Folder.Teams.Where(w => w.Teammembers.Contains(P.Person)).Count())) </td>

                    @foreach (Team t in Model.Folder.Teams)
                {
                        <td data-team="@t.TeamID" data-person="@P.Person.PersonID" class="teamstatus @Html.Raw(t.Teammembers.Count() >= Model.minTeammembers ? "tok" : "" )">
                            @if (P.Person.PersonID == t.TeamLeaderId)
                        {
                                <i class="@Icons.PlanningAnswerTeamleader bigger-150"></i>
                        }
                        else if (t.Teammembers.Contains(P.Person))
                        {
                            <i class="@Icons.PlanningAnswerTeammember bigger-150"></i>
                        }
                        else
                        {
                            if (PFeedback != null && PFeedback.Pass == true)
                            {
                                <i class="@Icons.PlanningAnswerFalse bigger-150"></i>
                            }
                            else
                            {
                            var TeamAnswer = PFeedback == null ? null : PFeedback.Answers.Where(a => a.TeamID == t.TeamID).FirstOrDefault();

                            switch (TeamAnswer == null ? null : TeamAnswer.OK)
                            {
                                case true:
                                    <i class="@Icons.PlanningAnswerTrue bigger-150"></i>
                                    break;
                                case false:
                                <i class="@Icons.PlanningAnswerFalse bigger-150"></i>
                                    break;
                                default:
                                <i class="@Icons.PlanningAnswerNull bigger-150"></i>
                                    break;
                            }
                            }
                        }
                        </td>
                }
                </tr>
       
        }
    </tbody>



</table>
